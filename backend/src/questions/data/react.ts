import { AvailableQuestionTypes, Question } from "src/types";

export const reactQuestions: Omit<Question, 'id'>[] = [
  {
    question: 'Для чего нужен хук useEffect',
    answer: `Это хук для синхронизации компонента с внешними системами. 
    Здесь могут располагаться запросы к серверу, подключение/отключение listeners, создание подключении с сервером или api браузера.</br>
    В хук передается функция, которая и выполняет эти действия. Она может возвращать функцию, которая будет осуществлять отписку от событий, закрытие соединений и т.д.</br>
    Вторым аргументом передается массив зависимостей.</br>
    Если аргумент не передавать, то хук отрабатывает при каждом рендере.</br>
    Если пустой массив, то хук отработает только при первом рендере. Функция отписки отработает при размонтировании компонента.</br>
    Если в массиве есть зависимости, то хук отрабатывает при их изменении.</br>
    В этом случае работа происходит вот так: 
    Запускается функция эффект при первом рендере, при изменении зависимости запускается функция отписки со старыми значениями, затем функция эффекта с новыми значениями, и т.д.</br>
    Если мы определяем объект или функцию в нашем компоненте и передаем в зависимости, то могу происходить нежелательные вызовы хука. 
    В этом случае необходимо обернуть созданную сущность в <b>useCallback/useMemo</b>.</br>
    Хук имеет синхронную версию <b>useLayoutEffect</b>. Иногда помогает избежать ненужных рендеров, но работает медленнее. Предпочтительнее использовать <b>useEffect</b></br>.
    <b>useEffect</b> работает только на клиенте.
    `,
  },
  {
    question: 'Разница между Conrext и State Managers',
    answer: `<b>Context</b> - способ передачи данных во все компоненты без проброски props. Используют для передачи настроек интерфейса, тем, языка.</br>
    <b>Context</b> передает значение. В результате все компоненты которые его используют будут перерисованы при изменении этого значения.</br>
    <b>State Managers</b> - используются для управления данными (чтение, запись). При из использовании передается экземпляр хранилища. 
    Это позволяет компонентам подписываться на изменение только необходимых данных, что предотвращает ненужные рендеры.</br>
    <b>State Managers</b> позволяют реализовывать более сложную логику, использовать промежуточное ПО (Middleware). 
    Они могут иметь специальные расширения для браузера, позволяющие упростить отладку. Так же  <b>State Managers</b> не являются частью <b>React</b>, в отличии от <b>Context</b>.</br>
    Так же <b>State Managers</b> используют <b>Context</b> для подключения.
    `,
  },
].map(question => ({ ...question, type: AvailableQuestionTypes.REACT }));

